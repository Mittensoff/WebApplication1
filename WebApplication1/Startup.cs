using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using WebApplication1.Profiles;
using WebApplication1.Services;
using WebApplication1.Dto;
using Microsoft.EntityFrameworkCore;
using Microsoft.OpenApi;
using Microsoft.OpenApi.Models;
using System.IO;
using System.Reflection;

namespace WebApplication1
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddHttpClient<OpenWeatherService>().ConfigurePrimaryHttpMessageHandler(
                handler => new HttpClientHandler()
                {
                });

            services.AddTransient<MailNotifierService>();

            //Profile register
            services.AddScoped<IMainMapper<BasicForecastDto, OpenWeatherForecastDaily>, ForecastProfile>();
            services.AddScoped<IMainMapper<BasicCurrentWeatherDto, OpenWeatherCurrentWeatherDto>, CurrentWeatherProfile>();

            services.AddControllers();

            services.AddDbContext<MainContext>(options =>
            {
                options.UseSqlServer(Configuration["mainContextConnectionString"]);
            });

            services.AddMvcCore();

            services.AddSwaggerGen(c =>
            {
                c.EnableAnnotations(); 
                c.SwaggerDoc("v1", new OpenApiInfo { Title = "FoodAppDemo", Version = "v1" });

                //Locate the XML file being generated by ASP.NET...
                var baseDirectory = AppDomain.CurrentDomain.BaseDirectory;
                var commentsFileName = Assembly.GetExecutingAssembly().GetName().Name + ".xml";//"G2F.Collective.Api.XML"
                var commentsFile = Path.Combine(baseDirectory, commentsFileName);
                c.IncludeXmlComments(commentsFile);
            });
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseHttpsRedirection();

            app.UseRouting();

            app.UseAuthorization();

            app.UseSwagger();
            app.UseSwaggerUI(c =>
            {
                c.SwaggerEndpoint("/swagger/v1/swagger.json", "My API V1"); 
            });

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });



        }
    }
}
